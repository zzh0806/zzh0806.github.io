{"meta":{"title":"spring-cloud","subtitle":null,"description":null,"author":"zzh","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"spring-data-jpa快速入门","slug":"spring-data-jpa","date":"2017-06-06T15:18:06.122Z","updated":"2017-06-07T01:20:14.336Z","comments":true,"path":"2017/06/06/spring-data-jpa/","link":"","permalink":"http://yoursite.com/2017/06/06/spring-data-jpa/","excerpt":"spring-data-jpa是Spring Data的一个子项目，可以极大的简化我们对数据库的操作，我们只需要通过编写一个继承自JpaRepository的接口就能完成数据访问","text":"spring-data-jpa是Spring Data的一个子项目，可以极大的简化我们对数据库的操作，我们只需要通过编写一个继承自JpaRepository的接口就能完成数据访问 项目配置使用SPRING INITIALIZR快速创建一个spring boot项目http://start.spring.io/ 添加依赖Spring-data-jpa 依赖Hibernate。如果对Hibernate有一定了解，可以毫不费力的看懂并上手使用Spring-data-jpa在pom.xml中添加相关依赖 1234&lt;dependency &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt; 配置数据库连接在application.xml中配置：数据库连接信息。为方便测试加入spring.jpa.properties.hibernate.hbm2ddl.auto=update，可以根据实体类自动创建表结构，实际项目中不推荐使用此配置。 123456spring.datasource.url=jdbc:mysql://localhost:3306/demospring.datasource.username=rootspring.datasource.password=123456spring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.jpa.properties.hibernate.hbm2ddl.auto=update 创建实体创建一个User实体，包含id（主键）、name（姓名）、age（年龄）属性，通过ORM框架其会被映射到数据库表中，由于配置了hibernate.hbm2ddl.auto，在应用启动的时候框架会自动去数据库中创建对应的表。 123456789101112131415@Data@Entity@Table(name = \"user\")public class User &#123; @Id @GeneratedValue private Integer id; @Column(nullable = false) private String name; @Column(nullable = false) private Integer age;&#125; 本示例项目中使用了lombok插件，只要是实体类上加上@Data，lombok会自动生成get set方法。 创建数据访问接口创建一个继承JpaRepository的接口 1234public interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123; &#125; 该接口继承自JpaRepository，该接口本身已经实现了创建（save）、更新（save）、删除（delete）、查询（findAll、findOne）等基本操作的方法。 123456789101112131415161718192021222324252627282930@Servicepublic class UserService &#123; @Autowired private UserRepository userRepository; public void findUser(Integer userId)&#123; // 根据ID查询 User user = userRepository.findOne(userId); user.setName(\"test\"); // 更新 userRepository.save(user); User user2 = new User(); user2.setName(\"test2\"); user2.setAge(18); // 创建 userRepository.save(user2); // 查询所有 List&lt;User&gt; list = userRepository.findAll(); // 根据实体查询 User u = new User(); u.setId(userId); List&lt;User&gt; list1 = userRepository.findAll(Example.of(u)); // 删除 userRepository.delete(userId); // 查询userId的 User是否存在 userRepository.exists(userId); &#125;&#125; Spring-data-jpa还有一大特性：通过解析方法名创建查询。 12345678910public interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123; // 按name查询User User findByName(String name) // 按name和age查询User User findByNameAndAge(String name, Integer age) // 按name或者age查询User User findByNameorAge(String name, Integer age) // 按name模糊查询User User findByNameLike(String name)&#125; 更多规则可以查询官网：https://docs.spring.io/spring-data/jpa/docs/current/reference/html/ @Query查询1234567@Repositorypublic interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123; @Query(\"select u from User u where u.name = ?1\") User findByName(String name);&#125; 原生SQL支持12@Query(value = \"select * from user a where a.age = ?1\",nativeQuery = true)User findUser(String age); @Modifying1234567891011@Repositorypublic interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123; void deleteByName(String name); @Modifying @Query(\"delete from User u where user.name = ?1\") void deleteInBulkByName(String name);&#125; deleteByName将先进行一个查询，然后逐个删除返回的实例deleteInBulkByName将直接执行删除SQL 分页排序1234567891011@Repositorypublic interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123; // 分页排序查询 Page&lt;User&gt; findByAge(Integer age, Pageable pageable); // 只排序查询 List&lt;User&gt; findByAge(Integer age, Sort sort); // 只根据年龄查询 List&lt;User&gt; findByAge(Integer age);&#125; 12345678910111213141516@Servicepublic class UserService &#123; @Autowired private UserRepository userRepository; public void findPage(Integer page,Integer size,Integer age)&#123; Pageable pageable = new PageRequest(page,size,new Sort(Sort.Direction.ASC,\"age\")); Page&lt;User&gt; pageData = userRepository.findAll(pageable); List&lt;User&gt; list = pageData.getContent(); Long count = pageData.getTotalElements(); Integer totalPage = pageData.getTotalPages(); Page&lt;User&gt; pageData2 = userRepository.findByAge(age,pageable); List&lt;User&gt; list2 = userRepository.findByAge(age,new Sort(Sort.Direction.ASC,\"name\")); &#125;","categories":[],"tags":[]}]}