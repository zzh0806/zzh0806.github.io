<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[spring-boot快速入门]]></title>
      <url>/2017/07/04/spring-boot/</url>
      <content type="html"><![CDATA[<p>传统的spring项目的配置都是基于XML配置的，每次创建一个项目都需要复制粘贴一堆的配置。Spring Boot可以基于Spring轻松创建需要很少配置的项目。</p>
<a id="more"></a>
<h2 id="spring-boot-特性"><a href="#spring-boot-特性" class="headerlink" title="spring boot 特性"></a>spring boot 特性</h2><p>1、创建独立的Spring应用程序<br>2、直接嵌入Tomcat，Jetty或Undertow（不需要部署WAR文件）<br>3、提供 ‘starter’ POMs来简化Maven配置<br>4、尽可能自动配置spring<br>5、提供生产就绪功能，如指标，运行状况检查和外部化配置<br>6、绝对没有代码生成，也不需要XML配置</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RabbitMq快速入门]]></title>
      <url>/2017/06/08/rabiitmq/</url>
      <content type="html"><![CDATA[<p>RabbitMQ是一个消息代理 - 一个消息系统的媒介。它可以为你的应用提供一个通用的消息发送和接收平台，并且保证消息在传输过程中的安全。<br><a id="more"></a></p>
<h2 id="传统项目中使用RabbitMq"><a href="#传统项目中使用RabbitMq" class="headerlink" title="传统项目中使用RabbitMq"></a>传统项目中使用RabbitMq</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在pom.xml中添加相关依赖</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-rabbit&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.7.3.RELEASE&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>新建一个rabbitmq.properties文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spring.rabbitmq.host=<span class="number">192.168</span>.1.2</div><div class="line">spring.rabbitmq.port=<span class="number">2500</span></div><div class="line">spring.rabbitmq.username=test</div><div class="line">spring.rabbitmq.password=<span class="number">123456</span></div><div class="line">spring.rabbitmq.virtual-host=test</div></pre></td></tr></table></figure>
<p>读取rabbitmq.properties文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;</div><div class="line">  &lt;property name="locations"&gt;</div><div class="line">      &lt;list&gt;</div><div class="line">          &lt;value&gt;classpath:rabbitmq.properties&lt;/value&gt;</div><div class="line">      &lt;/list&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>connectionFactory、rabbitTemplate配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 用户日志队列名称</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMON_USER_LOG = <span class="string">"common_user_log"</span>;</div><div class="line">    </div><div class="line">		<span class="comment">// rabbitmq 端口</span></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.port&#125;"</span>)</div><div class="line">    <span class="keyword">public</span> Integer RabbitPort;</div><div class="line">    <span class="comment">// rabbitmq 地址</span></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.host&#125;"</span>)</div><div class="line">    <span class="keyword">public</span> String RabbitHost;</div><div class="line">    <span class="comment">// rabbitmq 虚拟主机 （类似mysql 的数据库）</span></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.virtual-host&#125;"</span>)</div><div class="line">    <span class="keyword">public</span> String RabbitVirtualHost;</div><div class="line">    <span class="comment">// rabbitmq 用户名</span></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.username&#125;"</span>)</div><div class="line">    <span class="keyword">public</span> String RabbitUserName;</div><div class="line">    <span class="comment">// rabbitmq 密码</span></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.password&#125;"</span>)</div><div class="line">    <span class="keyword">public</span> String RabbitPassword;</div><div class="line"></div><div class="line">		</div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"connectionFactory"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> CachingConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        CachingConnectionFactory connectionFactory = <span class="keyword">new</span> CachingConnectionFactory();</div><div class="line">        connectionFactory.setPort(RabbitPort);</div><div class="line">        connectionFactory.setHost(RabbitHost);</div><div class="line">        connectionFactory.setVirtualHost(RabbitVirtualHost);</div><div class="line">        connectionFactory.setUsername(RabbitUserName);</div><div class="line">        connectionFactory.setPassword(RabbitPassword);</div><div class="line">        <span class="keyword">return</span> connectionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"rabbitAdmin"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> RabbitAdmin <span class="title">rabbitAdmin</span><span class="params">(@Qualifier(<span class="string">"connectionFactory"</span>)</span> CachingConnectionFactory connectionFactory) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RabbitAdmin(connectionFactory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"rabbitTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(@Qualifier(<span class="string">"connectionFactory"</span>)</span> CachingConnectionFactory connectionFactory) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RabbitTemplate(connectionFactory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">     * 定义一个队列</div><div class="line">     * 业务不复杂，所有队列默认绑定到默认交换名称，因此我们可以在发送中使用队列名称作为路由密钥</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">commonUserQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(COMMON_USER_LOG);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRabbitMq</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">   rabbitTemplate.convertAndSend(RabbitMqConfig.COMMON_USER_LOG, <span class="string">"我是一个RabbitMq消息"</span>);</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="消息接受"><a href="#消息接受" class="headerlink" title="消息接受"></a>消息接受</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"> <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RabbitListener</span>（RabbitMqConfig.COMMON_USER_LOG）</div><div class="line">     <span class="keyword">public</span>  <span class="keyword">void</span> processOrder（String data）&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="spring-boot项目中使用RabbitMq"><a href="#spring-boot项目中使用RabbitMq" class="headerlink" title="spring-boot项目中使用RabbitMq"></a>spring-boot项目中使用RabbitMq</h2><p>在pom.xml中添加相关依赖</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>在application.properties 中加入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">spring.rabbitmq.host=<span class="number">192.168</span>.1.2</div><div class="line">spring.rabbitmq.port=<span class="number">2500</span></div><div class="line">spring.rabbitmq.username=test</div><div class="line">spring.rabbitmq.password=<span class="number">123456</span></div><div class="line">spring.rabbitmq.virtual-host=test</div></pre></td></tr></table></figure>
<p>定义队列</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMON_USER_LOG = <span class="string">"common_user_log"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">commonUserQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(COMMON_USER_LOG);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发送消息、接受消息和传统spring 项目一样的</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-data-jpa快速入门]]></title>
      <url>/2017/06/06/spring-data-jpa/</url>
      <content type="html"><![CDATA[<p>spring-data-jpa是Spring Data的一个子项目，可以极大的简化我们对数据库的操作，我们只需要通过编写一个继承自JpaRepository的接口就能完成数据访问<br><a id="more"></a></p>
<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p>使用SPRING INITIALIZR快速创建一个spring boot项目<br><a href="http://start.spring.io/" target="_blank" rel="external">http://start.spring.io/</a></p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>Spring-data-jpa 依赖Hibernate。如果对Hibernate有一定了解，可以毫不费力的看懂并上手使用Spring-data-jpa<br>在pom.xml中添加相关依赖</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h3><p>在application.xml中配置：数据库连接信息。为方便测试加入spring.jpa.properties.hibernate.hbm2ddl.auto=update，可以根据实体类自动创建表结构，实际项目中不推荐使用此配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/demo</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=<span class="number">123456</span></div><div class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</div><div class="line"></div><div class="line">spring.jpa.properties.hibernate.hbm2ddl.auto=update</div></pre></td></tr></table></figure>
<h3 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h3><p>创建一个User实体，包含id（主键）、name（姓名）、age（年龄）属性，通过ORM框架其会被映射到数据库表中，由于配置了hibernate.hbm2ddl.auto，在应用启动的时候框架会自动去数据库中创建对应的表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本示例项目中使用了lombok插件，只要是实体类上加上@Data，lombok会自动生成get set方法。</p>
<h3 id="创建数据访问接口"><a href="#创建数据访问接口" class="headerlink" title="创建数据访问接口"></a>创建数据访问接口</h3><p>创建一个继承JpaRepository的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该接口继承自JpaRepository，该接口本身已经实现了创建（save）、更新（save）、删除（delete）、查询（findAll、findOne）等基本操作的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUser</span><span class="params">(Integer userId)</span></span>&#123;</div><div class="line">        <span class="comment">// 根据ID查询</span></div><div class="line">        User user = userRepository.findOne(userId);</div><div class="line">        user.setName(<span class="string">"test"</span>);</div><div class="line">        <span class="comment">// 更新</span></div><div class="line">        userRepository.save(user);</div><div class="line">        User user2 = <span class="keyword">new</span> User();</div><div class="line">        user2.setName(<span class="string">"test2"</span>);</div><div class="line">        user2.setAge(<span class="number">18</span>);</div><div class="line">        <span class="comment">// 创建</span></div><div class="line">        userRepository.save(user2);</div><div class="line">        <span class="comment">// 查询所有</span></div><div class="line">        List&lt;User&gt; list = userRepository.findAll();</div><div class="line">        <span class="comment">// 根据实体查询</span></div><div class="line">        User u = <span class="keyword">new</span> User();</div><div class="line">        u.setId(userId);</div><div class="line">        List&lt;User&gt; list1 = userRepository.findAll(Example.of(u));</div><div class="line">        <span class="comment">// 删除</span></div><div class="line">        userRepository.delete(userId);</div><div class="line">        <span class="comment">// 查询userId的 User是否存在</span></div><div class="line">        userRepository.exists(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Spring-data-jpa还有一大特性：通过解析方法名创建查询。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">// 按name查询User</span></div><div class="line">	<span class="function">User <span class="title">findByName</span><span class="params">(String name)</span></span></div><div class="line">	<span class="comment">// 按name和age查询User</span></div><div class="line">	User <span class="title">findByNameAndAge</span><span class="params">(String name, Integer age)</span></div><div class="line">	<span class="comment">// 按name或者age查询User</span></div><div class="line">	User <span class="title">findByNameorAge</span><span class="params">(String name, Integer age)</span></div><div class="line">	<span class="comment">// 按name模糊查询User</span></div><div class="line">	User <span class="title">findByNameLike</span><span class="params">(String name)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多规则可以查询官网：<a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/" target="_blank" rel="external">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/</a></p>
<h3 id="Query查询"><a href="#Query查询" class="headerlink" title="@Query查询"></a>@Query查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"select u from User u where u.name = ?1"</span>)</div><div class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="原生SQL支持"><a href="#原生SQL支持" class="headerlink" title="原生SQL支持"></a>原生SQL支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(value = <span class="string">"select * from user a where a.age = ?1"</span>,nativeQuery = <span class="keyword">true</span>)</div><div class="line"><span class="function">User <span class="title">findUser</span><span class="params">(String age)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="Modifying"><a href="#Modifying" class="headerlink" title="@Modifying"></a>@Modifying</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Modifying</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"delete from User u where user.name = ?1"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteInBulkByName</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>deleteByName将先进行一个查询，然后逐个删除返回的实例<br>deleteInBulkByName将直接执行删除SQL</p>
<h3 id="分页排序"><a href="#分页排序" class="headerlink" title="分页排序"></a>分页排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">		<span class="comment">// 分页排序查询</span></div><div class="line">    <span class="function">Page&lt;User&gt; <span class="title">findByAge</span><span class="params">(Integer age, Pageable pageable)</span></span>;</div><div class="line">    <span class="comment">// 只排序查询</span></div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAge</span><span class="params">(Integer age, Sort sort)</span></span>;</div><div class="line">    <span class="comment">// 只根据年龄查询</span></div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAge</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPage</span><span class="params">(Integer page,Integer size,Integer age)</span></span>&#123;</div><div class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(page,size,<span class="keyword">new</span> Sort(Sort.Direction.ASC,<span class="string">"age"</span>));</div><div class="line">        Page&lt;User&gt; pageData = userRepository.findAll(pageable);</div><div class="line">        List&lt;User&gt; list = pageData.getContent();</div><div class="line">        Long count = pageData.getTotalElements();</div><div class="line">        Integer totalPage = pageData.getTotalPages();</div><div class="line">        Page&lt;User&gt; pageData2 = userRepository.findByAge(age,pageable);</div><div class="line">        List&lt;User&gt; list2 = userRepository.findByAge(age,<span class="keyword">new</span> Sort(Sort.Direction.ASC,<span class="string">"name"</span>));</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p>继承JpaSpecificationExecutor接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasicCommunityRespository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">BasicCommunity</span>, <span class="title">Integer</span>&gt;, <span class="title">JpaSpecificationExecutor</span> </span>&#123;</div><div class="line"></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;BasicCommunity&gt; <span class="title">list</span><span class="params">(String communityName, String communityIds)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> basicCommunityRespository.findAll(getWhereClause(communityName, communityIds));</div><div class="line">	&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">private</span> Specification&lt;BasicCommunity&gt; <span class="title">getWhereClause</span><span class="params">(<span class="keyword">final</span> String communityName, <span class="keyword">final</span> String communityIds)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Specification&lt;BasicCommunity&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;BasicCommunity&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</div><div class="line">              List&lt;Predicate&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">              <span class="keyword">if</span> (!org.springframework.util.StringUtils.isEmpty(communityName)) &#123;</div><div class="line">                  predicates.add(cb.like(root.get(<span class="string">"name"</span>), <span class="string">"%"</span> + communityName + <span class="string">"%"</span>));</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (!org.springframework.util.StringUtils.isEmpty(communityIds)) &#123;</div><div class="line">                  String[] idsStr = communityIds.split(<span class="string">","</span>);</div><div class="line">                  List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                  <span class="keyword">for</span> (String s : idsStr) &#123;</div><div class="line">                      <span class="keyword">if</span> (!org.springframework.util.StringUtils.isEmpty(s)) &#123;</div><div class="line">                          <span class="keyword">try</span> &#123;</div><div class="line">                              ids.add(Integer.parseInt(s));</div><div class="line">                          &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">                              EstateEdgeErrors.parameterError(<span class="string">"communityName"</span>);</div><div class="line">                          &#125;</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">                  <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                      predicates.add(root.get(<span class="string">"id"</span>).in(ids));</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">return</span> query.where(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()])).getRestriction();</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
  
  
</search>
